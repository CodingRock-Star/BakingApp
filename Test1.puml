@startuml
class com.hellofresh.task1.model.Recipe {
- int id
- String title
- EventType event
+ int getId()
+ String getTitle()
+ EventType getEvent()
+ void setId(int)
+ void setTitle(String)
+ void setEvent(EventType)
}
interface com.hellofresh.task1.model.unselectedItems.UnSelectedItemsInterface {
+ void markSingleUnSelectedRecipe(Recipe)
+ void markMultipleUnSelectedRecipe(List<Recipe>)
}
interface com.hellofresh.task1.model.menucard.MenuItemsInterface {
+ void setListOfAvailableRecipe(List<Recipe>)
+ List<Recipe> getListOfAvailableRecipe()
+ List<Recipe> getListOfSelectedRecipe()
+ List<Recipe> getListOfSelectedRecipeWithTag()
+ int getNumberOfItemsSelected()
}
class com.hellofresh.task1.model.accessItems.AccessItemsListClass {
- List<Recipe> availableListOfRecipe
- boolean isFamilyProperty
- CopyOnWriteArrayList<Recipe> selectedListOfItem
- List<Recipe> selectedListOfRecipeWithTag
+ List<Recipe> getAvailableListOfRecipe()
+ boolean isFamilyProperty()
+ List<Recipe> getListOfSelectedRecipes()
+ List<Recipe> getListOfRecipesWithTag()
+ int getListOfSelectedRecipe()
+ void setListOfRecipesWithTag(List<Recipe>)
+ void setListOfSelectedRecipe(List<Recipe>)
+ List<Recipe> getSelectedListOfRecipeWithTag()
+ void setAvailableListFromMenuCard(List<Recipe>,boolean)
}
class com.hellofresh.task1.model.unselectedItems.UnSelectedRecipeItemClass {
- AccessItemsInterface accessItemsInterface
+ void markSingleUnSelectedRecipe(Recipe)
+ void markMultipleUnSelectedRecipe(List<Recipe>)
}
class com.hellofresh.task1.model.Exception.MenuCardException {
- {static} long serialVersionUID
- int code
+ int getCode()
}
class com.hellofresh.task1.model.Subscription {
- int id
- long deliveryDay
- boolean isForFamily
+ void setId(int)
+ void setDeliveryDay(long)
+ void setForFamily(boolean)
+ int getId()
+ long getDeliveryDay()
+ boolean isForFamily()
}
interface com.hellofresh.task1.model.accessItems.AccessItemsInterface {
+ List<Recipe> getListOfSelectedRecipes()
+ List<Recipe> getListOfRecipesWithTag()
+ int getListOfSelectedRecipe()
+ boolean isFamilyProperty()
+ List<Recipe> getAvailableListOfRecipe()
+ void setListOfRecipesWithTag(List<Recipe>)
+ void setListOfSelectedRecipe(List<Recipe>)
+ void setAvailableListFromMenuCard(List<Recipe>,boolean)
}
interface com.hellofresh.task1.model.selectedItems.SelectedItemsInterface {
+ void setSingleSelectedRecipe(Recipe)
+ void setMultipleSelectedRecipe(List<Recipe>)
}
class com.hellofresh.task1.model.selectedItems.SelectedRecipeItemClass {
- List<Recipe> selectedRecipeFromAvailableList
- AccessItemsInterface accessItemsInterface
+ void setSingleSelectedRecipe(Recipe)
+ void setMultipleSelectedRecipe(List<Recipe>)
}
class com.hellofresh.task1.model.menucard.MenuCard {
- AccessItemsInterface accessItemsInterface
- Subscription subscription
# List<Recipe> availableRecipeList
+ void setListOfAvailableRecipe(List<Recipe>)
+ List<Recipe> getListOfAvailableRecipe()
+ List<Recipe> getListOfSelectedRecipe()
+ List<Recipe> getListOfSelectedRecipeWithTag()
+ int getNumberOfItemsSelected()
}


com.hellofresh.task1.model.accessItems.AccessItemsInterface <|.. com.hellofresh.task1.model.accessItems.AccessItemsListClass
com.hellofresh.task1.model.unselectedItems.UnSelectedItemsInterface <|.. com.hellofresh.task1.model.unselectedItems.UnSelectedRecipeItemClass
com.hellofresh.task1.model.Exception.Exception <|-- com.hellofresh.task1.model.Exception.MenuCardException
com.hellofresh.task1.model.selectedItems.SelectedItemsInterface <|.. com.hellofresh.task1.model.selectedItems.SelectedRecipeItemClass
com.hellofresh.task1.model.menucard.MenuItemsInterface <|.. com.hellofresh.task1.model.menucard.MenuCard
@enduml